#pragma once

int psqt[13][2][64];


int mat[2][7] = {
    {0, 71, 340, 366, 529, 1115, 0},
    {0, 99, 331, 366, 651, 1228, 0},
};

int bonusTable[7][2][64] = {
    {},
    {
        {
            37, 5, 2, 6, 1, 0, 3, 0,
            142, 53, 105, 130, 123, 75, 33, 5,
            17, 8, 40, 52, 59, 89, 57, 26,
            -7, -3, 1, 6, 29, 33, 11, 8,
            -7, -18, -1, 15, 22, 18, 0, 2,
            -14, -16, -5, -3, 11, -3, 8, -8,
            -10, -8, -1, -7, 6, 22, 26, -7,
            28, 16, -3, 6, 4, 2, -2, 2,

        },
        {
            1, -4, 2, 3, -1, 1, 1, 0,
            123, 139, 109, 70, 66, 92, 114, 122,
            77, 73, 35, 0, -3, 21, 50, 59,
            44, 30, 14, -2, -5, 2, 22, 23,
            27, 25, 8, 1, 1, 4, 19, 9,
            22, 19, 10, 8, 12, 11, 9, 8,
            28, 25, 18, 19, 26, 18, 13, 11,
            14, 4, -1, -1, 2, 0, 1, 2,

        },
    },
    {
        {
            -160, -57, -48, -61, 5, -82, -50, -105,
            -19, -4, 25, 50, -1, 91, 3, -6,
            -19, 16, 4, 22, 66, 61, 33, 2,
            8, 14, 30, 39, 27, 56, 28, 36,
            5, 9, 16, 20, 27, 25, 22, 17,
            -15, 3, 6, 7, 21, 23, 31, 13,
            -8, -3, 0, 16, 17, 16, 21, 14,
            -28, -11, -20, 5, 5, 6, -8, -13,

        },
        {
            -16, 3, 18, 16, 1, -25, -22, -58,
            1, 26, 22, 15, 14, -13, 10, -16,
            -3, 7, 35, 25, -2, 3, -7, -20,
            10, 16, 29, 28, 33, 26, 16, -13,
            3, 18, 33, 39, 35, 27, 16, 3,
            12, 21, 18, 41, 34, 15, 8, 7,
            12, 9, 18, 14, 12, 8, 17, 24,
            7, -7, 15, 10, 14, 8, -1, -2,

        },
    },
    {
        {
            -55, -67, -37, -103, -76, -54, -44, -76,
            -11, -19, -12, -4, -8, -30, -46, -25,
            -18, -10, -19, 3, -14, 18, -8, 7,
            -26, 6, 4, 14, 21, -1, 9, -32,
            -3, -6, 3, 20, 16, 3, 2, 25,
            12, 26, 0, 11, 16, 10, 27, 23,
            29, 6, 23, 2, 9, 30, 31, 42,
            17, 31, 3, 3, 15, -6, 17, 33,

        },
        {
            0, 37, 23, 27, 24, 14, 7, -2,
            8, -1, 20, 22, 11, 13, -3, 5,
            12, 12, -3, -2, 1, -5, 8, -2,
            16, 14, 7, 14, 6, 11, 6, 13,
            10, 9, 20, 16, 12, 14, 9, -15,
            -2, 17, 7, 19, 24, 3, 3, 10,
            13, -13, -3, 7, 12, 3, -7, -6,
            2, -3, -2, 10, 12, 19, 7, -5,

        },
    },
    {
        {
            21, -10, 10, -8, -9, 3, 19, 38,
            -2, -12, 5, 11, 1, 9, 18, 61,
            -22, 2, -8, -11, 18, 26, 70, 41,
            -9, -9, 2, 1, 2, 2, 23, 5,
            -14, -23, -15, -9, -7, -26, 14, 3,
            -21, -15, -18, -13, 0, 0, 28, 14,
            -14, -17, -3, -3, 7, 11, 25, 1,
            -5, -2, -1, 10, 15, 13, 27, 7,

        },
        {
            20, 31, 32, 39, 27, 36, 22, 18,
            30, 45, 50, 40, 39, 34, 29, 4,
            37, 34, 41, 32, 15, 16, 1, -4,
            35, 36, 34, 27, 18, 16, 15, 16,
            25, 21, 21, 23, 18, 23, -4, 3,
            13, 5, 12, 6, -3, -6, -22, -20,
            -1, 4, 3, 1, -2, -14, -18, -8,
            4, 4, 11, -1, -4, -3, -9, -13,

        },
    },
    {
        {
            1, -17, 7, 23, 5, 32, 22, -8,
            2, -20, -25, -13, -37, -35, -20, 45,
            9, 5, -3, -5, -19, 14, -2, 37,
            -3, 12, -4, 0, -12, -5, -1, -6,
            15, -4, 9, 4, 10, 2, 16, 15,
            14, 28, 15, 12, 21, 22, 37, 32,
            18, 19, 24, 30, 33, 38, 40, 60,
            12, 10, 12, 25, 29, 5, 24, 16,

        },
        {
            24, 33, 45, 41, 64, 50, 55, 33,
            26, 71, 94, 83, 120, 91, 98, 61,
            35, 42, 79, 80, 103, 107, 87, 46,
            67, 63, 80, 91, 102, 82, 101, 77,
            47, 80, 57, 83, 69, 66, 69, 70,
            36, 12, 47, 31, 38, 49, 36, 19,
            19, 10, 5, 10, 9, -7, -8, -24,
            0, 5, 22, 0, 9, 10, 30, 29,

        },
    },
    {
        {
            -64, 76, 85, 1, 1, -50, 39, -42,
            30, 51, 49, 40, -17, 24, 7, -47,
            -74, 23, 16, -30, -17, -1, 14, -31,
            -77, -25, -72, -91, -65, -66, -84, -101,
            -52, -74, -48, -81, -89, -89, -105, -129,
            -2, -21, -53, -63, -62, -47, -27, -24,
            38, -20, -32, -57, -62, -43, -4, 28,
            44, 54, 37, -36, 7, -16, 38, 58,

        },
        {
            -209, -89, -48, -16, 10, 1, -40, -133,
            -18, 32, 54, 33, 59, 63, 65, 4,
            13, 55, 62, 71, 68, 66, 64, 12,
            4, 42, 62, 74, 72, 67, 55, 14,
            -6, 31, 48, 60, 56, 46, 36, 2,
            -30, 6, 27, 37, 36, 22, 4, -15,
            -52, -13, 0, 6, 8, -2, -26, -53,
            -86, -76, -49, -19, -48, -31, -69, -103,

        },
    },
};

void initPSQT() {
  for(int p = PAWN; p <= KING; p++) {
    for(int s = MG; s <= EG; s++) {
      for(int sq = 0; sq < 64; sq++) {
        psqt[getType(p, WHITE)][s][sq] = +mat[s][p] + bonusTable[p][s][mirror(BLACK, sq)];
        psqt[getType(p, BLACK)][s][sq] = -mat[s][p] - bonusTable[p][s][mirror(WHITE, sq)];
      }
    }
  }
}

void addPiece(int16_t score[], int p, int sq) {
  score[MG] += psqt[p][MG][sq];
  score[EG] += psqt[p][EG][sq];
}

void remPiece(int16_t score[], int p, int sq) {
  score[MG] -= psqt[p][MG][sq];
  score[EG] -= psqt[p][EG][sq];
}
