#pragma once

int psqt[13][2][64];

int mat[2][7] = {
    {0, 69, 299, 329, 484, 1094, 0},
    {0, 116, 364, 403, 700, 1255, 0},
};

int bonusTable[7][2][64] = {
    {},
    {
        {
            42, 1, 4, 5, 1, 0, 3, 1,
            146, 70, 116, 138, 132, 75, 29, 0,
            6, 14, 39, 54, 64, 83, 47, 13,
            -1, -1, -2, 14, 25, 25, 9, -4,
            -4, -8, 2, 5, 17, 19, 12, -11,
            -11, -13, -8, -4, 6, 14, 15, -11,
            -7, -3, -7, 0, -1, 24, 27, 0,
            31, 17, -4, 6, 4, 1, -2, 1,

        },
        {
            -1, -3, 2, 4, -1, 1, 0, 0,
            124, 143, 114, 81, 70, 97, 118, 129,
            76, 68, 40, 8, 3, 17, 42, 54,
            37, 28, 17, -11, -11, 9, 23, 25,
            23, 23, 5, -2, -6, 9, 18, 16,
            16, 16, 14, 13, 17, 13, 11, 11,
            25, 20, 21, 21, 33, 16, 17, 18,
            15, 4, 0, 0, 2, 1, 1, 2,

        },
    },
    {
        {
            -163, -55, -49, -69, 3, -85, -54, -108,
            -8, -3, 30, 50, 15, 86, 1, -1,
            -23, 4, 13, 29, 65, 68, 34, 7,
            2, 12, 29, 31, 25, 49, 30, 39,
            -4, 8, 14, 21, 26, 20, 33, 21,
            -12, 5, 3, 11, 20, 17, 19, 9,
            -15, -5, -6, 7, 6, 6, 8, 10,
            -28, -9, -27, -3, 4, 0, -3, -17,

        },
        {
            -15, 4, 21, 24, 7, -15, -17, -60,
            3, 20, 15, 23, 26, -15, 10, -11,
            -6, 5, 41, 33, 13, 19, -1, -12,
            5, 16, 38, 48, 51, 38, 28, 1,
            3, 14, 40, 42, 40, 42, 20, 13,
            -4, 5, 13, 36, 31, 11, 9, 0,
            4, 8, 0, 9, 13, -1, 13, 23,
            2, -12, 9, 8, 8, 2, -1, -2,

        },
    },
    {
        {
            -56, -71, -38, -99, -78, -58, -41, -83,
            -18, -8, -9, -3, -4, -23, -41, -17,
            -26, -14, -6, 3, 1, 17, -1, -7,
            -32, 10, 2, 27, 19, 12, 17, -19,
            -9, 3, 5, 18, 28, 1, 8, 15,
            8, 14, 0, 13, 12, 8, 18, 24,
            19, 8, 17, 0, 1, 14, 25, 27,
            17, 24, -6, -6, -7, -4, 13, 25,

        },
        {
            7, 41, 27, 38, 33, 17, 12, 5,
            12, 9, 24, 22, 17, 25, 8, 8,
            7, 17, 4, 10, 14, 5, 20, 0,
            9, 13, 12, 23, 22, 18, 16, 17,
            -4, 4, 19, 17, 19, 19, 10, -17,
            -3, 9, 0, 18, 16, -1, 2, 9,
            3, -16, -4, 5, 9, -6, -9, -14,
            -7, -3, 0, -1, 2, 7, 4, -13,

        },
    },
    {
        {
            29, 4, 16, -1, -1, 8, 31, 44,
            2, -10, 9, 22, 12, 17, 19, 59,
            -17, 13, 5, 16, 32, 42, 71, 37,
            -10, -1, 11, 26, 21, 17, 29, 10,
            -23, -22, -18, -8, -9, -15, 13, 0,
            -31, -19, -26, -18, -14, -12, 23, 2,
            -36, -23, -17, -13, -11, -3, 14, -12,
            -17, -16, -10, -5, -4, -4, 7, 0,

        },
        {
            38, 50, 44, 48, 46, 45, 37, 38,
            38, 46, 45, 47, 49, 32, 28, 11,
            37, 29, 40, 35, 22, 28, 4, 13,
            30, 33, 33, 31, 28, 26, 16, 23,
            17, 26, 26, 21, 18, 24, 7, 6,
            -1, 5, 4, -2, -5, -5, -17, -21,
            -13, -10, -10, -14, -15, -22, -26, -15,
            -6, -5, -4, -10, -10, -2, -15, -22,

        },
    },
    {
        {
            9, -3, 14, 31, 11, 36, 28, 5,
            5, -40, -21, -14, -26, -22, -16, 44,
            -5, -1, -13, -2, -9, 30, 14, 37,
            -6, 4, -8, -2, -2, 12, 22, 15,
            5, 1, 5, 2, 6, 13, 20, 22,
            4, 18, 14, 6, 8, 13, 27, 29,
            9, 13, 19, 15, 16, 24, 29, 50,
            15, 15, 16, 25, 26, 0, 19, 15,

        },
        {
            30, 47, 55, 53, 80, 59, 59, 47,
            33, 72, 96, 91, 132, 105, 104, 65,
            30, 41, 73, 80, 112, 121, 105, 57,
            56, 60, 72, 89, 114, 97, 114, 90,
            38, 73, 52, 81, 71, 73, 68, 72,
            27, 18, 38, 28, 32, 47, 26, 15,
            9, 4, -15, 7, 4, -20, -17, -32,
            -4, -1, 5, 6, -5, 3, 20, 24,

        },
    },
    {
        {
            -52, 88, 90, 5, 8, -59, 45, -43,
            35, 61, 49, 39, -20, 27, 4, -51,
            -72, 18, 13, -48, -28, -9, 9, -45,
            -89, -26, -75, -105, -69, -72, -85, -109,
            -52, -77, -44, -81, -81, -78, -88, -128,
            -5, -23, -49, -60, -53, -40, -14, -22,
            31, -11, -24, -65, -52, -49, 11, 29,
            32, 41, 16, -44, -5, -33, 39, 44,

        },
        {
            -209, -86, -45, -16, 9, 7, -37, -130,
            -14, 33, 51, 34, 52, 56, 63, 2,
            15, 55, 58, 64, 59, 63, 60, 10,
            13, 43, 65, 73, 66, 66, 58, 16,
            -8, 32, 47, 65, 63, 51, 42, 6,
            -30, 3, 25, 43, 38, 24, -2, -25,
            -49, -15, 3, 12, 12, 8, -23, -55,
            -88, -58, -37, -31, -63, -27, -57, -110,

        },
    },
};




void initPSQT() {
  for(int p = PAWN; p <= KING; p++) {
    for(int s = MG; s <= EG; s++) {
      for(int sq = 0; sq < 64; sq++) {
        psqt[getType(p, WHITE)][s][sq] = +mat[s][p] + bonusTable[p][s][mirror(BLACK, sq)];
        psqt[getType(p, BLACK)][s][sq] = -mat[s][p] - bonusTable[p][s][mirror(WHITE, sq)];
      }
    }
  }
}

void addPiece(int16_t score[], int p, int sq) {
  score[MG] += psqt[p][MG][sq];
  score[EG] += psqt[p][EG][sq];
}

void remPiece(int16_t score[], int p, int sq) {
  score[MG] -= psqt[p][MG][sq];
  score[EG] -= psqt[p][EG][sq];
}
