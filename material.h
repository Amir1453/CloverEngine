#pragma once

int psqt[13][2][64];

int mat[2][7] = {
    {0, 71, 340, 366, 528, 1113, 0},
    {0, 100, 332, 367, 653, 1230, 0},
};

int bonusTable[7][2][64] = {
    {},
    {
        {
            42, 1, 4, 5, 1, 0, 3, 1,
            145, 60, 111, 133, 131, 73, 33, 2,
            19, 9, 40, 55, 64, 89, 58, 26,
            -7, -4, 1, 6, 29, 31, 11, 9,
            -7, -18, -1, 14, 21, 18, 1, 3,
            -14, -16, -5, -3, 10, -3, 8, -7,
            -10, -8, -1, -7, 7, 20, 26, -8,
            31, 17, -4, 6, 4, 1, -2, 1,

        },
        {
            -1, -3, 2, 4, -1, 1, 0, 0,
            120, 138, 110, 76, 71, 96, 119, 126,
            72, 69, 37, 3, -1, 23, 51, 59,
            45, 31, 15, -1, -5, 3, 22, 23,
            27, 25, 8, 1, 2, 5, 18, 10,
            22, 19, 10, 8, 12, 12, 9, 9,
            28, 25, 18, 19, 26, 18, 13, 11,
            15, 4, 0, 0, 2, 1, 1, 2,

        },
    },
    {
        {
            -163, -55, -48, -70, 2, -86, -54, -108,
            -21, -4, 24, 48, -2, 89, 1, -6,
            -18, 15, 2, 22, 63, 59, 32, 0,
            7, 13, 29, 38, 28, 52, 26, 35,
            5, 12, 15, 19, 25, 26, 21, 18,
            -14, 3, 6, 6, 21, 22, 29, 12,
            -8, -3, -1, 16, 17, 15, 20, 12,
            -26, -11, -20, 4, 5, 6, -9, -13,

        },
        {
            -15, 3, 19, 22, 4, -22, -18, -60,
            1, 25, 21, 16, 14, -12, 8, -16,
            -2, 8, 37, 26, 1, 3, -6, -16,
            10, 15, 29, 28, 32, 29, 18, -8,
            4, 16, 32, 38, 36, 27, 18, 4,
            12, 22, 18, 43, 33, 15, 9, 10,
            10, 9, 20, 14, 12, 9, 18, 30,
            7, -5, 17, 10, 14, 8, 0, -1,

        },
    },
    {
        {
            -57, -71, -36, -100, -78, -56, -42, -85,
            -12, -19, -12, -1, -7, -30, -50, -26,
            -19, -13, -20, 2, -13, 14, -9, 8,
            -27, 5, 2, 14, 21, -1, 10, -33,
            -4, -4, 2, 19, 18, 4, 1, 26,
            12, 24, 0, 11, 16, 10, 27, 23,
            28, 6, 23, 2, 9, 29, 31, 41,
            17, 31, 3, 4, 14, -7, 15, 33,

        },
        {
            5, 41, 27, 31, 30, 14, 9, 3,
            8, 1, 23, 20, 10, 15, 2, 2,
            11, 12, -1, 0, 2, -2, 11, -5,
            18, 14, 9, 17, 9, 13, 5, 16,
            8, 7, 21, 16, 13, 14, 11, -18,
            -3, 17, 6, 20, 24, 3, 2, 9,
            11, -13, -3, 7, 12, 1, -7, -5,
            2, -2, -2, 8, 13, 18, 4, -9,

        },
    },
    {
        {
            20, -9, 13, -7, -11, 5, 25, 36,
            -4, -12, 3, 13, 0, 8, 18, 61,
            -21, 1, -7, -10, 19, 27, 69, 37,
            -8, -9, 2, 1, 4, 2, 26, 6,
            -14, -25, -15, -9, -7, -24, 14, 3,
            -21, -14, -18, -13, 1, 0, 30, 15,
            -13, -17, -4, -3, 7, 11, 26, 2,
            -5, -2, -1, 9, 15, 13, 29, 8,

        },
        {
            21, 31, 33, 39, 29, 37, 23, 19,
            29, 46, 51, 40, 39, 35, 30, 5,
            35, 33, 40, 31, 13, 16, 0, -3,
            34, 35, 33, 27, 17, 15, 12, 16,
            24, 21, 21, 21, 18, 23, -4, 1,
            14, 5, 12, 6, -3, -5, -23, -21,
            -2, 4, 3, 2, -2, -14, -18, -10,
            4, 4, 11, -1, -4, -3, -11, -12,

        },
    },
    {
        {
            2, -16, 7, 24, 3, 31, 22, -9,
            2, -20, -26, -15, -37, -35, -21, 41,
            9, 4, -2, -3, -18, 20, -5, 43,
            -4, 12, -3, 0, -12, -3, 2, -3,
            14, -4, 8, 5, 11, 2, 17, 15,
            13, 27, 15, 13, 20, 22, 39, 33,
            19, 19, 25, 30, 33, 37, 39, 62,
            13, 13, 12, 25, 28, 6, 25, 19,

        },
        {
            22, 34, 46, 42, 68, 52, 53, 35,
            24, 70, 97, 85, 122, 93, 100, 59,
            34, 44, 79, 81, 105, 112, 93, 47,
            65, 63, 79, 89, 105, 83, 103, 79,
            46, 81, 58, 82, 68, 68, 68, 68,
            34, 13, 46, 31, 38, 48, 34, 17,
            16, 11, 4, 10, 9, -8, -8, -29,
            1, 5, 22, 0, 7, 9, 25, 27,

        },
    },
    {
        {
            -52, 88, 90, 5, 8, -59, 45, -43,
            35, 62, 50, 40, -19, 28, 5, -50,
            -72, 19, 13, -46, -27, -9, 10, -44,
            -90, -27, -77, -105, -69, -75, -90, -110,
            -51, -80, -48, -83, -89, -90, -107, -133,
            -2, -19, -52, -60, -59, -46, -27, -20,
            37, -20, -32, -56, -62, -43, -4, 28,
            42, 53, 36, -36, 7, -15, 38, 58,

        },
        {
            -210, -87, -45, -16, 10, 8, -37, -130,
            -12, 33, 57, 36, 56, 64, 69, 7,
            13, 59, 62, 74, 68, 65, 67, 15,
            7, 41, 60, 74, 68, 66, 54, 16,
            -5, 31, 45, 57, 54, 44, 36, 5,
            -29, 6, 27, 35, 35, 21, 5, -17,
            -50, -13, 1, 6, 9, -2, -25, -53,
            -88, -76, -50, -17, -48, -30, -69, -104,

        },
    },
};

void initPSQT() {
  for(int p = PAWN; p <= KING; p++) {
    for(int s = MG; s <= EG; s++) {
      for(int sq = 0; sq < 64; sq++) {
        psqt[getType(p, WHITE)][s][sq] = +mat[s][p] + bonusTable[p][s][mirror(BLACK, sq)];
        psqt[getType(p, BLACK)][s][sq] = -mat[s][p] - bonusTable[p][s][mirror(WHITE, sq)];
      }
    }
  }
}

void addPiece(int16_t score[], int p, int sq) {
  score[MG] += psqt[p][MG][sq];
  score[EG] += psqt[p][EG][sq];
}

void remPiece(int16_t score[], int p, int sq) {
  score[MG] -= psqt[p][MG][sq];
  score[EG] -= psqt[p][EG][sq];
}
