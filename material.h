#pragma once

int psqt[13][2][64];

int mat[2][7] = {
    {0, 70, 301, 329, 484, 1094, 0},
    {0, 117, 368, 406, 703, 1259, 0},
};

int bonusTable[7][2][64] = {
    {},
    {
        {
            42, 1, 4, 5, 1, 0, 3, 1,
            146, 72, 116, 138, 132, 75, 29, 0,
            6, 14, 39, 53, 64, 83, 46, 11,
            0, -1, -1, 14, 26, 25, 9, -4,
            -3, -8, 2, 6, 15, 20, 12, -11,
            -11, -13, -8, -4, 6, 14, 15, -11,
            -7, -2, -6, -1, -1, 24, 28, 0,
            31, 17, -4, 6, 4, 1, -2, 1,

        },
        {
            -1, -3, 2, 4, -1, 1, 0, 0,
            124, 143, 114, 81, 70, 97, 118, 129,
            76, 67, 40, 8, 3, 17, 42, 54,
            37, 28, 17, -11, -11, 9, 23, 25,
            23, 23, 5, -1, -6, 9, 18, 16,
            17, 17, 14, 13, 17, 13, 11, 11,
            25, 20, 21, 21, 33, 15, 16, 18,
            15, 4, 0, 0, 2, 1, 1, 2,

        },
    },
    {
        {
            -163, -55, -49, -69, 3, -85, -54, -108,
            -7, -3, 30, 50, 17, 86, 1, -1,
            -23, 3, 14, 29, 65, 68, 34, 7,
            2, 14, 29, 32, 29, 50, 33, 39,
            -3, 8, 17, 25, 30, 24, 35, 22,
            -12, 3, 2, 10, 18, 17, 17, 8,
            -16, -5, -9, 3, 3, 4, 7, 8,
            -28, -12, -28, -4, 2, -2, -5, -17,

        },
        {
            -15, 4, 21, 24, 7, -13, -17, -60,
            3, 19, 13, 23, 26, -15, 10, -11,
            -6, 5, 41, 33, 14, 21, -1, -12,
            5, 17, 39, 50, 54, 40, 30, 3,
            3, 14, 41, 44, 42, 44, 20, 15,
            -6, 3, 12, 34, 30, 11, 9, -2,
            4, 8, -2, 8, 11, -3, 13, 23,
            2, -14, 7, 8, 6, 2, -1, -2,

        },
    },
    {
        {
            -56, -71, -38, -99, -78, -58, -41, -83,
            -19, -8, -9, -3, -4, -23, -41, -17,
            -26, -14, -4, 3, 3, 17, 0, -8,
            -32, 9, 2, 27, 18, 13, 16, -17,
            -9, 4, 7, 17, 28, 6, 10, 14,
            5, 14, 0, 13, 12, 9, 19, 22,
            19, 8, 15, 1, 1, 13, 25, 26,
            17, 24, -6, -6, -8, -5, 13, 25,

        },
        {
            7, 41, 27, 38, 33, 17, 12, 5,
            12, 9, 24, 22, 17, 25, 8, 8,
            7, 17, 4, 10, 14, 6, 21, 2,
            9, 13, 12, 23, 23, 18, 17, 17,
            -4, 4, 19, 18, 20, 20, 10, -17,
            -3, 8, 0, 16, 15, -1, 2, 9,
            1, -16, -4, 5, 8, -6, -9, -14,
            -9, -3, 0, -1, 2, 7, 4, -13,

        },
    },
    {
        {
            29, 4, 16, -1, -1, 8, 31, 44,
            2, -10, 9, 22, 12, 18, 19, 59,
            -17, 13, 5, 18, 32, 42, 71, 37,
            -10, 0, 12, 28, 23, 19, 29, 10,
            -23, -22, -18, -8, -7, -13, 13, 0,
            -31, -19, -26, -18, -14, -12, 22, 0,
            -38, -23, -17, -13, -11, -3, 13, -14,
            -19, -17, -11, -6, -5, -5, 6, -2,

        },
        {
            38, 50, 44, 48, 46, 45, 39, 39,
            38, 46, 45, 47, 49, 32, 28, 11,
            37, 29, 40, 33, 22, 28, 4, 13,
            30, 33, 33, 30, 28, 26, 16, 23,
            17, 27, 27, 21, 20, 24, 9, 7,
            -2, 5, 4, -2, -5, -5, -16, -21,
            -13, -11, -10, -14, -15, -22, -26, -15,
            -7, -5, -5, -11, -10, -2, -15, -22,

        },
    },
    {
        {
            9, -1, 14, 31, 13, 36, 28, 7,
            5, -42, -21, -14, -25, -20, -16, 44,
            -7, -1, -14, -2, -8, 31, 16, 36,
            -6, 4, -8, -2, -2, 14, 24, 17,
            5, 3, 5, 3, 8, 15, 22, 22,
            3, 17, 13, 5, 8, 13, 27, 28,
            7, 12, 18, 14, 15, 23, 29, 48,
            14, 14, 16, 24, 26, 0, 19, 15,

        },
        {
            32, 49, 57, 55, 82, 61, 60, 49,
            33, 73, 96, 91, 134, 107, 104, 65,
            30, 41, 73, 80, 112, 121, 107, 59,
            54, 60, 72, 89, 116, 99, 116, 92,
            37, 71, 52, 81, 73, 75, 68, 72,
            27, 18, 38, 28, 32, 47, 26, 15,
            9, 3, -17, 6, 3, -22, -19, -32,
            -5, -2, 3, 6, -7, 3, 20, 24,

        },
    },
    {
        {
            -52, 88, 90, 5, 8, -59, 45, -43,
            35, 61, 49, 39, -20, 27, 4, -51,
            -72, 18, 13, -48, -28, -9, 9, -45,
            -89, -26, -75, -105, -69, -72, -85, -109,
            -52, -77, -44, -81, -79, -76, -84, -126,
            -5, -23, -47, -60, -51, -38, -12, -22,
            31, -11, -24, -67, -52, -51, 10, 28,
            30, 40, 15, -44, -6, -35, 38, 43,

        },
        {
            -209, -86, -45, -16, 9, 7, -37, -130,
            -14, 33, 51, 34, 52, 54, 63, 2,
            15, 55, 58, 62, 57, 63, 60, 10,
            15, 43, 65, 73, 66, 66, 58, 16,
            -8, 32, 48, 65, 64, 52, 42, 6,
            -30, 3, 25, 43, 38, 24, -2, -25,
            -49, -15, 3, 13, 12, 8, -23, -55,
            -88, -58, -37, -32, -63, -27, -58, -110,

        },
    },
};





void initPSQT() {
  for(int p = PAWN; p <= KING; p++) {
    for(int s = MG; s <= EG; s++) {
      for(int sq = 0; sq < 64; sq++) {
        psqt[getType(p, WHITE)][s][sq] = +mat[s][p] + bonusTable[p][s][mirror(BLACK, sq)];
        psqt[getType(p, BLACK)][s][sq] = -mat[s][p] - bonusTable[p][s][mirror(WHITE, sq)];
      }
    }
  }
}

void addPiece(int16_t score[], int p, int sq) {
  score[MG] += psqt[p][MG][sq];
  score[EG] += psqt[p][EG][sq];
}

void remPiece(int16_t score[], int p, int sq) {
  score[MG] -= psqt[p][MG][sq];
  score[EG] -= psqt[p][EG][sq];
}
